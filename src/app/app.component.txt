notes

https://www.youtube.com/playlist?list=PL5Agzt13Z4g_D7RjXZN8h3nR_Gpf-rcjJ
                - by the dot net office (youtube)

=====================================================================

1. introduction to jasmine and karma

jasmine is bdd(behavious driven development)
it is tesing framework for angular for unit testing
karma is open source automation testing tool

2. flow of angular unit test case

app.component.spec.ts -> file we write our test cases
describe -- is the test suite for particular component
it -- is the particular test case inside the component
testBed and async
jasmine give us the asynchronous functinality via async
testBed is main utility inside the angular.
beforeEach -- run before any block
describe first runs -- beforeEach runs -- lastly it runs

3. how to run the angular unit test cases

describe -- tells the jasmine on which component unit testing will be performed
beforeEach -- tells the jasmine to run give code before anything
testBed -- setup the configuration and initialize the favourable condition for testing
configureTestingModule -- setup the module that allows us to test our test case
declaration -- component which is to tested and also the who dependency on component like child component
provider -- override the actual servide using the spy
imports -- are the api we used inside the component like formsmodule for ngmodel etc.
ng test -- to run the test
for particular folder ng test --include /path

4. jasmine and karma configuration

karma -- helps to run test cases inside the chrome
nothing important google search for few terms in karma.conf.js and test.ts

5.
inside the app.component.ts
showMessage(message: string): string {
    return message
}

inside the spec.ts
it('show alert message', () => {
    expect(component.showMessage('hello')).toBe('hello');
});

inside the describe we create a object of AppComponent like below --
let component = new AppComponent()

then, for test case we write it function inside it -- we call expect() 
expect(our_case).toBe(case_should_come).
our_case = component.method_inside_app.component.ts(showMessage)(passing the variable if needed)

if we want simply function inside the file , export the function if it's class is not exported

export function Addition(number1: number, number2: number): number {
  return number1 + number2;
}

it('addition method', () => {
    expect(Addition(10, 20)).toBe(30);
});

6. exclude the angular unit test cases form execution.

to exclude the unit test case we can simply prefix the 'x' before the it function like below --
xit('',()=>{}) -- this will not run and show the status of pending spec

and same can be done for the describe also if we make it xdescribe()

7. jasmine matchers

there are 2 types of matcher in-built and custom matchers
matcher are the js function that does a boolean comparision between actual output and expected output

customer matcher need to be define explicitly

8. toBe and toEqual

for primitive data types we will use the toBe like in case of string, numbers, and boolean while toEqual used for everything else.

generally( toEqual ) use it for object comparision

9. toBe(true), toBeTrue(), toBeTruthy(), toBe(false), toBeFalse(), toBeFalsy()

toBe(true) -- handle only primitive boolean type
toBeTrue() -- handles both primitive boolean type and boolean object
only difference I found is in 1 we pass the argument and the other we don't 
same goes for toBeFalse()
anything that is not truthy is falsy
expect(undefined).toBeFalse(); // this test case will false as toBeFalse() only check for false

10. toBeGreaterThan() ,toBeGreaterThanOrEqual() ,toBeLessThan() ,toBeLessThanOrEqual() 

toBeGreaterThan() ,toBeGreaterThanOrEqual() -- both are comparision function that evaluates to be true or false

same goes for other also. it is as the function name suggests

11. toMatch() and toBeCloseTo() Jasmin Matcher

toMatch() -- should be applied to regular expression
we can also use the .not().toMatch() -- for opposite scenario

toBeCloseTo() -- should be used when we want to check the precision of the number
for example the pi value or exponential constant value

12. toBeDefined and toBeUndefined Jasmine matcher 

toBeDefined() matcher must be use when we do comparision against defined 

I have written the few defined and undefined cases with few examples in test cases

12. tobenull() ,tocontain() ,tobeNan() , toBePositiveInfinity, toBeNegetiveInfinity 

tobenull -- matcher must be assigned to when comparision agaist null
toBeNaN -- matcher should be applied successfully for finding undertimed value
toBePositiveInfinity -- for positive infinity (1/0)
toBeNegativeInfinity -- for negative infinity (-1/0)

13. beforeEach and afterEach

beforeEach -- before each test case beforeEach will run inside the describe
afterEach -- after every test case afterEachw will run inside the describe

see the example inside the b4NdAfterEach.spec.ts

It is not suited to create instance of component inside the each test cases. Therefore, we define the component first inside the describe method, simply --
    let component : AppComponent
after the inside the beforeEach we create an instance of component --
    component = new AppComponent()
by doing this 2 above case, our component instance is created before each test case.

inside the afterEach() method we will destroy the testbed for each test case it will alter the true nature of method, for example

we adding 2 to a number -- expect should be number + 2
then in another test case we substract 2 from it -- expect should be number -2, but rather it will be number (since number +2 -2 === number)
therefore inside the afterEach() --     TestBed.resetTestingModule(); is needed

15. BeforeAll and AfterAll in Jasmin Method 

